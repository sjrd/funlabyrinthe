Ce fichier décrit la grammaire du langage FunDelphi.

#####

tkEof	Fin de fichier
tkBlank Blanc
tkComment   Commentaire
tkIdentifier	Identificateur
tkInteger	Nombre entier
tkFloat	Nombre en virgule flottante
tkStringCst	Chaine

tkOpenBracket	(
tkCloseBracket	)
tkOpenSqBracket	[
tkCloseSqBracket	]
tkEquals	=
tkComma	,
tkColon	:
tkSemiColon	;
tkDot	.
tkRange	..
tkHat	^
tkAt	@
tkAssign	:=

tkUnit	unit
tkUses	uses
tkConst	const
tkResourceString	resourcestring
tkVar	var
tkOut	out

tkProcedure	procedure
tkFunction	function
tkPrivate	private
tkPublic	public
tkForward	forward

tkPlugin	plugin
tkObject	object
tkField	field
tkEffect	effect
tkTool	tool
tkObstacle	obstacle
tkPosComponent	poscomponent
tkVehicle	vehicle
tkCreator	creator
tkClass	class
tkComponents	components
tkAttributes	attributes
tkActions	actions
tkMessages	messages

tkMessage	message
tkName	name
tkHint	hint
tkCategory	category
tkZIndex	zindex
tkImage	image
tkAction	action

tkPlus	+
tkMinus	-
tkTimes	*
tkDivide	/
tkDiv	div
tkMod	mod
tkShl	shl
tkShr	shr
tkOr	or
tkAnd	and
tkXor	xor
tkNot	not
tkLowerThan	<
tkLowerEq	<=
tkGreaterThan	>
tkGreaterEq	>=
tkNotEqual	<>
tkIn	in
tkIs	is
tkAs	as

tkBegin	begin
tkEnd	end

tkString	string
tkNil	nil

tkIf	if
tkThen	then
tkElse	else
tkWhile	while
tkDo	do
tkRepeat	repeat
tkUntil	until
tkFor	for
tkTo	to
tkDownTo	downto
tkCase	case
tkOf	of
tkTry	try
tkExcept	except
tkOn	on
tkFinally	finally
tkRaise	raise
tkInherited	inherited
tkWith	with

tkCan	can
tkCannot	cannot
tkHas	has
tkAtKw	at
tkLeast	least
tkMost	most
tkMore	more
tkLess	less
tkThan	than
tkExactly	exactly
tkReceives	receives
tkDiscards	discards

#####

Source
	'unit'* Identifier ';'* UsesSection (ImplSection)* 'end'* '.'* tkEof*

ImplSection	Simplify
	ActionsSection
	AttributesSection
	MessagesSection
	ComponentsSection
	PluginSection
	ObjectSection
	FieldSection
	EffectSection
	ToolSection
	ObstacleSection
	PosComponentSection
	VehicleSection
	CreatorSection
	ClassSection
	ConstSection
	RoutineImpl

Identifier
	tkIdentifier
	'string'

UsesSection
	'uses'* CommaIdentList ';'*
	@

CommaIdentList	Simplify
	Identifier (','* Identifier)*

CommaIdentDeclList
	IdentifierDecl (','* IdentifierDecl)*

QualifiedIdent	AsText
	Identifier ('.'* Identifier)*

IdentifierDecl	AsText
	Identifier

TypeName
	QualifiedIdent

InitializationExpression
	0 ArrayInitializationExpression
	1 RecordInitializationExpression
	2 GUIDInitializationExpression
	3 OtherInitializationExpression

ArrayInitializationExpression
	ArrayInitialization

ArrayInitialization
	'('* InitializationExpression (','* InitializationExpression)* ')'*

RecordInitializationExpression
	RecordInitialization

RecordInitialization
	'('* Identifier ':'* InitializationExpression (';'* Identifier ':'* InitializationExpression)* ')'*

GUIDInitializationExpression
	GUIDInitialization

GUIDInitialization
	RecordInitialization
	tkStringCst

OtherInitializationExpression
	OtherInitialization

OtherInitialization
	ConstExpression

Expression
	SingleExpr NextExpression

NextExpression	Simplify
	-1 BinaryOp SingleExpr NextExpression
	@

ConstExpression
	Expression

SingleExpr
	ParenthesizedExpr NextExprList
	SingleValue NextExprList
	UnaryOpExpr

UnaryOpExpr
	UnaryOp SingleExpr
	AddressOfOp SingleExpr

ParenthesizedExpr
	'('* Expression ')'*

NextExprList	Simplify
	1 NextExpr NextExprList
	@

NextExpr	Simplify
	UnaryOpModifier
	Parameters
	ArrayIndices
	FieldSelection

UnaryOpModifier
	DereferenceOp

DereferenceOp
	'^'

Parameters
	'('* InnerParameters ')'*

InnerParameters	Simplify
	Parameter (','* Parameter)*
	@

Parameter	Simplify
	Expression
	1 '['* SetOrOpenArrayBuilder ']'*

SetOrOpenArrayBuilder
	SetOrOpenArrayRange (','* SetOrOpenArrayRange)*
	@

SetOrOpenArrayRange
	Expression ('..'* Expression)?

ExprListOrEmpty	Simplify
	ExprList
	@

ArrayIndices
	'['* ExprList ']'*

ExprList	Simplify
	Expression (','* Expression)*

FieldSelection
	'.'* Identifier

SingleValue
	IntegerConst
	FloatConst
	StringConst
	IdentifierSingleValue
	'inherited'* InheritedSingleValue
	NilValue
	'['* SetValue ']'*

IntegerConst
	tkInteger

FloatConst
	tkFloat

StringConst
	tkStringCst

IdentifierSingleValue
	Identifier

InheritedSingleValue	Simplify
	1 InheritedExpression
	0 PureInheritedExpression

InheritedExpression
	Identifier

PureInheritedExpression
	@

NilValue
	'nil'

SetValue
	SetRange (','* SetRange)*
	@

CaseOfSetValue
	SetRange (','* SetRange)*

SetRange
	Expression ('..'* Expression)?

BinaryOp	Simplify
	DelphiBinaryOp
	InOperation
	IsOperation
	AsOperation
	CanOp
	HasOp

DelphiBinaryOp
	'+'
	'-'
	'*'
	'/'
	'div'
	'mod'
	'shl'
	'shr'
	'or'
	'and'
	'xor'
	'='
	'<'
	'<='
	'>'
	'>='
	'<>'

InOperation
	'in'

IsOperation
	'is'

AsOperation
	'as'

CanOp
	'can'
	'cannot'

HasOp
	'has'* HasComparison SingleExpr

HasComparison
	'at'* AtLeastOrAtMost
	MoreThan
	LessThan
	Exactly
	@

AtLeastOrAtMost	Simplify
	AtLeast
	AtMost

AtLeast
	'least'

AtMost
	'most'

MoreThan
	'more' 'than'*

LessThan
	'less' 'than'*

Exactly
	'exactly'

UnaryOp
	'+'
	'-'
	'not'

AddressOfOp
	'@'

ConstSection
	ConstKeyWord* (ConstDecl)+

ConstKeyWord
	'const'
	'resourcestring'

ConstDecl
	IdentifierDecl InnerConstDecl ';'*

InnerConstDecl	Simplify
	':'* TypeName '='* InitializationExpression
	'='* ConstExpression

ActionsSection
	'actions'* CommaIdentDeclList ';'*

AttributesSection
	'attributes'* CommaIdentDeclList ';'*

MessagesSection
	'messages'* (MessageDecl)+

MessageDecl
	IdentifierDecl ':'* TypeName '='* InitializationExpression ';'*

ComponentsSection
	'components'* (Component)+

Component
	IdentifierDecl ':'* QualifiedIdent ComponentParameters ';'*

ComponentParameters
	(ComponentParameter ';'*)* 'end'*
	@

ComponentParameter
	Identifier ':'* Expression

PluginSection
	'plugin'* IdentifierDecl ParentClass PluginMembers 'end'* ';'*

PluginMembers
	(PluginMember)*

PluginMember	Simplify
	Hint
	Category
	ZIndex
	Event
	PluginAction

ObjectSection
	'object'* IdentifierDecl ParentClass ObjectMembers 'end'* ';'*

ObjectMembers
	(ObjectMember)*

ObjectMember	Simplify
	Name
	Category
	Image
	Event
	ObjectAction

FieldSection
	'field'* IdentifierDecl ParentClass SquareCompMembers 'end'* ';'*

EffectSection
	'effect'* IdentifierDecl ParentClass SquareCompMembers 'end'* ';'*

ToolSection
	'tool'* IdentifierDecl ParentClass SquareCompMembers 'end'* ';'*

ObstacleSection
	'obstacle'* IdentifierDecl ParentClass SquareCompMembers 'end'* ';'*

SquareCompMembers
	(SquareCompMember)*

SquareCompMember	Simplify
	Name
	Category
	Image
	Event

PosComponentSection
	'poscomponent'* IdentifierDecl ParentClass PosCompMembers 'end'* ';'*

VehicleSection
	'vehicle'* IdentifierDecl ParentClass PosCompMembers 'end'* ';'*

PosCompMembers
	(PosCompMember)*

PosCompMember	Simplify
	Name
	Category
	Image
	Event

CreatorSection
	'creator'* IdentifierDecl ParentClass CreatorItemClass CreatorMembers 'end'* ';'*

CreatorItemClass
	'for'* TypeName

CreatorMembers
	(CreatorMember)*

CreatorMember	Simplify
	Hint
	Category
	Image
	Event

ClassSection
	'class'* IdentifierDecl ParentClass ClassMembers 'end'* ';'*

ClassMembers
	(ClassMember)*

ClassMember	Simplify
	Event

ParentClass
	'('* QualifiedIdent ')'*
	@

Fields	Simplify
	'var'* (Field)+

Field
	CommaIdentDeclList ':'* TypeName ';'*

AutoOverride
	@

Name
	'name'* ConstExpression ';'*

Hint
	'hint'* ConstExpression ';'*

Category
	'category'* ConstExpression ';'*

ZIndex
	'zindex'* ConstExpression ';'*

Image
	'image'* ConstExpression (','* ConstExpression)* ';'*

Event
	EventHeader MethodBody

EventHeader	Simplify
	'on'* InnerEventHeader 'do'*

InnerEventHeader	Simplify
	MethodEventHeader
	MessageEventHeader

MethodEventHeader
	IdentifierDecl AutoOverride

MessageEventHeader
	'message'* MessageMethodName MessageEventLinkKind

MessageMethodName
	Identifier

MessageEventLinkKind
	@

PluginAction
	'action'* ActionList ActionCondition ';'*

ObjectAction
	'action'* ActionList ActionCondition ActionOnUse ';'*

ActionList
	ConstExpression (','* ConstExpression)*

ActionCondition
	'if'* Expression
	@

ActionOnUse	Simplify
	'then'* Instruction
	@

RoutineImpl
	RoutineImplHeader ForwardOrMethodBody

RoutineImplHeader
	RoutineKind RoutineName RoutineSignature RoutineVisibility ';'*

RoutineKind
	'procedure'
	'function'

RoutineName
	IdentifierDecl

RoutineVisibility
	'private'
	'public'
	@

ForwardOrMethodBody	Simplify
	ForwardMarker
	MethodBody

ForwardMarker
	'forward' ';'*

RoutineSignature
	('('* ParamList ')'*)? ReturnType

ParamList	Simplify
	Param (';'* Param)*
	@

ReturnType
	':'* TypeName
	@

Param
	ParamKind ParamNameList ParamType

ParamKind
	'const'
	'var'
	'out'
	@

ParamNameList
	ParamName (','* ParamName)*

ParamName
	Identifier

ParamType	Simplify
	':'* TypeName

MethodBody
	CommonMethodBody

CommonMethodBody	Simplify
	(InMethodSection)* BeginEndBlock ';'*

InMethodSection	Simplify
	ConstSection
	LocalVarSection

LocalVarSection
	'var'* (LocalVar)+

LocalVar
	CommaIdentDeclList ':'* TypeName ';'*

InstructionList
	(Instruction ';'*)*

Instruction	Simplify
	NoInstruction
	BeginEndBlock
	IfThenElseInstruction
	CaseOfInstruction
	WhileInstruction
	RepeatInstruction
	ForInstruction
	TryInstruction
	RaiseInstruction
	ExpressionInstruction
	WithInstruction

NoInstruction
	@

BeginEndBlock
	'begin'* InstructionList 'end'*

IfThenElseInstruction
	'if'* Expression 'then'* Instruction ElseBranch

ElseBranch	Simplify
	1 'else'* Instruction
	NoInstruction

CaseOfInstruction
	'case'* Expression 'of'* (CaseOfClause)+ CaseOfElseClause 'end'*

CaseOfClause
	CaseOfSetValue ':'* Instruction ';'*

CaseOfElseClause
	'else'* InstructionList
	@

WhileInstruction
	'while'* Expression 'do'* Instruction

RepeatInstruction
	'repeat'* InstructionList 'until'* Expression

ForInstruction
	'for'* ForControlVar ':='* Expression ForToDownTo Expression 'do'* Instruction

ForControlVar
	Identifier

ForToDownTo	Simplify
	ForTo
	ForDownTo

ForTo
	'to'

ForDownTo
	'downto'

TryInstruction
	'try'* InstructionList NextTryInstruction 'end'*

NextTryInstruction	Simplify
	ExceptClause
	FinallyClause

ExceptClause
	'except'* NextExceptClause

NextExceptClause	Simplify
	InstructionList
	MultiOn

MultiOn
	(OnClause)+ MultiOnElseClause

OnClause
	'on'* ExceptionVarAndType 'do'* InstructionList

ExceptionVarAndType
	QualifiedIdent (':'* QualifiedIdent)?

MultiOnElseClause
	'else'* InstructionList
	@

FinallyClause
	'finally'* InstructionList

RaiseInstruction
	'raise'* (Expression)?

ExpressionInstruction
	ExecutableExpression

ExecutableExpression
	Expression (ExecutableOp Expression)?

ExecutableOp	Simplify
	AssignmentOp
	ReceivesOp
	DiscardsOp

AssignmentOp
	':='

ReceivesOp
	'receives'* SingleExpr

DiscardsOp
	'discards'* SingleExpr

WithInstruction
	'with'* Expression WithEx

WithEx	Simplify
	InnerWith
	'do'* Instruction

InnerWith
	','* Expression WithEx
